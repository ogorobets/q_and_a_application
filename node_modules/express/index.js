'use strict';

module.exports = require('./lib/express');

var path = require('path');
var express = require('express');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var app = express();
var server = require('http').createServer(app);
var io = require('socket.io')(server);

//provide a sensible default for local development
var db_name = 'q_and_a';
var mongodb_connection_string = 'mongodb://127.0.0.1:27017/' + db_name;

//take advantage of openshift env vars when available:
if(process.env.OPENSHIFT_MONGODB_DB_URL){
    mongodb_connection_string = process.env.OPENSHIFT_MONGODB_DB_URL + db_name;
}

mongoose.connect(mongodb_connection_string);

var Author = new Schema({
    username     : String
});

var Answer = new Schema({
    answer_text    : { type: String}
    , author       : { type: Schema.Types.Mixed}
    , date         : Date
});

var Question = new Schema({
    title     : { type: String, index: true }
    , author        : { type: Schema.Types.Mixed}
    , question_body : { type: String }
    , answer_ids    : { type: [String], trim: true}
    , tags          : { type: [String] }
    , date          : Date
});

var AuthorModel = mongoose.model('Author', Author);
var AnswerModel = mongoose.model('Answer', Answer);
var QuestionModel = mongoose.model('Question', Question);

app.use(bodyParser.json());         // to support JSON-encoded bodies
app.use(bodyParser.urlencoded({     // to support URL-encoded bodies
    extended: true
}));
app.use(cookieParser());
app.use(function (req, res, next) {
    var userName = req.cookies.userName;
    var isUserAbleToPostInfo = userName !== undefined;
    if (!req.locals) {
        req.locals = {};
    }
    req.locals.isUserAbleToPostInfo = isUserAbleToPostInfo;
    next();
});

io.on('connection', function (socket) {
    //socket.emit('news', { hello: 'world' });
    //socket.on('my other event', function (data) {
    //    console.log(data);
    //});


    socket.on('save-question', function (data) {
        var questionModelJson = data.reqData; //req.body
        questionModelJson['author'] = {
            _id: data.reqData.authorId,
            user_name: data.reqData.userName
        };
        questionModelJson['date'] = Date.now();

        var questionModel = new QuestionModel(questionModelJson);

        questionModel.save(function (error, savedQuestionModel) {
            if (error) {
                console.log("Error, QuestionModel not saved");
                return;
            }
            console.log("Success: QuestionModel saved");
            socket.emit('response', { success: true, id: data.id });
            //return res.send('success');
        });
    });

    socket.on('add-answer', function (data) {
        var answerModelJson = {};
        answerModelJson['answer_text'] = data.reqData.answerText;
        answerModelJson['author'] = {
            _id: data.reqData.authorId,
            user_name: data.reqData.userName
        };

        answerModelJson['date'] = Date.now();
        var parentQuestionId = data.reqData.questionId;;

        var answerModel = new AnswerModel(answerModelJson);

        answerModel.save(function (error, savedAnswerModel) {
            if (error) {
                console.log("Error, AnswerModel not saved");
                socket.emit('response', { success: false, id: data.id });
                return;
            }
            QuestionModel.findOne({_id: parentQuestionId}, function (err, doc) {
                doc.answer_ids.push(savedAnswerModel._id);
                doc.save();
            });
            console.log("Success: AnswerModel saved");
            socket.emit('response', { success: true, id: data.id });
            //return res.send('success');
        });
    });

    socket.on('get-questions', function (data) {
        var questionsType = data.reqData.questionsType;
        console.log('query', data.reqData);
        console.log('questionsType', questionsType);
        if (questionsType === 'all') {
            QuestionModel.find({}, function (err, docs) {
                socket.emit('response', { success: true, id: data.id, respData: docs});
            });
        } else if (questionsType === 'answered') {
            QuestionModel.$where('this.answer_ids.length > 0').exec(function (err, docs) {
                //res.json(docs);
                socket.emit('response', { success: true, id: data.id, respData: docs});
            });
        } else if (questionsType === 'unanswered') {
            QuestionModel.$where('this.answer_ids.length == 0').exec(function (err, docs) {
                socket.emit('response', { success: true, id: data.id, respData: docs});
            });
        }
    });

    socket.on('get-separate-question', function (data) {
        var questionsId = data.reqData.questionId;
        console.log('data.reqData', data.reqData);
        QuestionModel.findOne({_id: questionsId}, function (err, doc) {
            AnswerModel.find({
                '_id': { $in: doc.answer_ids}
            }, function (err, docs) {
                console.dir(doc);
                socket.emit('response', { success: true, id: data.id, respData: {separateQuestion: doc, answersText: docs}});
                //res.json({separateQuestion: doc, answersText: docs});
            });
        });
    });

    socket.on('get-user-id', function (data) {
        var userName = data.reqData.userName;
        console.log('userName', userName);
        AuthorModel.findOne({username: userName}, function (err, doc) {
            console.log('/get-user-id   ---   doc', doc);
            if (!doc) {
                var authorModel = new AuthorModel({username: userName});

                authorModel.save(function (error, savedAuthorModel) {
                    if (error) {
                        console.log("Error, AuthorModel not saved");
                        socket.emit('response', { success: false, id: data.id });
                        return;
                    }
                    console.log("Success: AuthorModel saved");
                    socket.emit('response', { success: true, id: data.id, respData: savedAuthorModel});
                    //return res.json(savedAuthorModel);
                });
            } else {
                //res.json(doc);
                socket.emit('response', { success: true, id: data.id, respData: doc});
            }
        });
    });
});



app.use(express.static(path.join(__dirname, 'public')));

var server_port = process.env.OPENSHIFT_NODEJS_PORT || 8080;
var server_ip_address = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';

server.listen(server_port, server_ip_address, function () {
    var host = server.address().address;
    var port = server.address().port;

    console.log('Example app listening at http://%s:%s', host, port);
});

