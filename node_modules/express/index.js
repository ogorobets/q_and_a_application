'use strict';

module.exports = require('./lib/express');

var path = require('path');
var express = require('express');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var app = express();

//provide a sensible default for local development
var db_name = 'q_and_a';
var mongodb_connection_string = 'mongodb://127.0.0.1:27017/' + db_name;

//take advantage of openshift env vars when available:
if(process.env.OPENSHIFT_MONGODB_DB_URL){
    mongodb_connection_string = process.env.OPENSHIFT_MONGODB_DB_URL + db_name;
}

mongoose.connect(mongodb_connection_string);

var Author = new Schema({
    username     : String
});

var Answer = new Schema({
    answer_text    : { type: String}
    , author       : { type: Schema.Types.Mixed}
    , date         : Date
});

var Question = new Schema({
    title     : { type: String, index: true }
    , author        : { type: Schema.Types.Mixed}
    , question_body : { type: String }
    , answer_ids    : { type: [String], trim: true}
    , tags          : { type: [String] }
    , date          : Date
});

var AuthorModel = mongoose.model('Author', Author);
var AnswerModel = mongoose.model('Answer', Answer);
var QuestionModel = mongoose.model('Question', Question);

app.use(bodyParser.json());         // to support JSON-encoded bodies
app.use(bodyParser.urlencoded({     // to support URL-encoded bodies
    extended: true
}));
app.use(cookieParser());
app.use(function (req, res, next) {
    var userName = req.cookies.userName;
    var isUserAbleToPostInfo = userName !== undefined;
    if (!req.locals) {
        req.locals = {};
    }
    req.locals.isUserAbleToPostInfo = isUserAbleToPostInfo;
    next();
});

app.put('/save-question', function (req, res) {
    var questionModelJson = req.body;
    questionModelJson['author'] = {
        _id: req.body.authorId,
        user_name: req.body.userName
    };
    questionModelJson['date'] = Date.now();

    var questionModel = new QuestionModel(questionModelJson);

    questionModel.save(function (error, savedQuestionModel) {
        if (error) {
            console.log("Error, QuestionModel not saved");
            return;
        }
        console.log("Success: QuestionModel saved");
        return res.send('success');
    });
});

app.put('/add-answer', function (req, res) {
    var answerModelJson = {};
    answerModelJson['answer_text'] = req.body.answerText;
    answerModelJson['author'] = {
        _id: req.body.authorId,
        user_name: req.body.userName
    };

    answerModelJson['date'] = Date.now();
    var parentQuestionId = req.body.questionId;;

    var answerModel = new AnswerModel(answerModelJson);

    answerModel.save(function (error, savedAnswerModel) {
        if (error) {
            console.log("Error, AnswerModel not saved");
            return;
        }
        QuestionModel.findOne({_id: parentQuestionId}, function (err, doc) {
            doc.answer_ids.push(savedAnswerModel._id);
            doc.save();
        });
        console.log("Success: AnswerModel saved");
        return res.send('success');
    });
});

app.get('/get-questions', function (req, res) {
    var questionsType = req.query.questionsType;
    console.log('query', req.query);
    console.log('questionsType', questionsType);
    if (questionsType === 'all') {
        QuestionModel.find({}, function (err, docs) {
            res.json(docs);
        });
    } else if (questionsType === 'answered') {
        QuestionModel.$where('this.answer_ids.length > 0').exec(function (err, docs) {
            res.json(docs);
        });
    } else if (questionsType === 'unanswered') {
        QuestionModel.$where('this.answer_ids.length == 0').exec(function (err, docs) {
            res.json(docs);
        });
    }
});

app.get('/get-separate-question', function (req, res) {
    var questionsId = req.query.questionId;
    console.log('query', req.query);
    QuestionModel.findOne({_id: questionsId}, function (err, doc) {
        AnswerModel.find({
            '_id': { $in: doc.answer_ids}
        }, function (err, docs) {
            console.dir(doc);
            res.json({separateQuestion: doc, answersText: docs});
        });
    });
});

app.post('/get-user-id', function (req, res) {
    var userName = req.body.userName;
    console.log('userName', userName);
    AuthorModel.findOne({username: userName}, function (err, doc) {
        console.log('/get-user-id   ---   doc', doc);
        if (!doc) {
            var authorModel = new AuthorModel({username: userName});

            authorModel.save(function (error, savedAuthorModel) {
                if (error) {
                    console.log("Error, AuthorModel not saved");
                    return;
                }
                console.log("Success: AuthorModel saved");
                return res.json(savedAuthorModel);
            });
        } else {
            res.json(doc);
        }
    });
});

app.use(express.static(path.join(__dirname, 'public')));

var server_port = process.env.OPENSHIFT_NODEJS_PORT || 8080;
var server_ip_address = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';

var server = app.listen(server_port, server_ip_address, function () {
    var host = server.address().address;
    var port = server.address().port;

    console.log('Example app listening at http://%s:%s', host, port);
});